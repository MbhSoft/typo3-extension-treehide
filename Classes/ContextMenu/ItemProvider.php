<?php

declare(strict_types=1);

namespace MbhSoftware\Treehide\ContextMenu;

use TYPO3\CMS\Backend\ContextMenu\ItemProviders\PageProvider;

/**
 * Class ItemProvider
 */
class ItemProvider extends PageProvider
{
    protected $itemsConfiguration = [
        'hidePagesRecursive' => [
            'type'           => 'item',
            'label'          => 'LLL:EXT:treehide/Resources/Private/Language/locallang.xlf:hideRecursive',
            'iconIdentifier' => 'actions-edit-hide',
            'callbackAction' => 'hidePagesRecursive',
        ],
        'unhidePagesRecursive' => [
            'type'           => 'item',
            'label'          => 'LLL:EXT:treehide/Resources/Private/Language/locallang.xlf:unhideRecursive',
            'iconIdentifier' => 'actions-edit-unhide',
            'callbackAction' => 'hidePagesRecursive',
        ],
    ];

    /**
     * This method adds custom item to list of items generated by item providers with higher priority value (PageProvider)
     * You could also modify existing items here.
     * The new item is added after the 'info' item.
     *
     * @param array $items
     * @return array
     */
    public function addItems(array $items): array
    {
        $this->initialize();
        $this->initDisabledItems();
        $localItems = $this->prepareItems($this->itemsConfiguration);
        if (isset($items['more']['childItems'])) {
            $items['more']['childItems'] = $items['more']['childItems'] + $localItems;
        } else {
            $items += $localItems;
        }
        return $items;
    }

    /**
     * Returns the provider priority which is used for determining the order in which providers are processing items
     * to the result array. Highest priority means provider is evaluated first.
     *
     * BEWARE: Returned priority should logically not clash with another provider.
     *         Please check @return int
     * @see \TYPO3\CMS\Backend\ContextMenu\ContextMenu::getAvailableProviders() if needed.
     */
    public function getPriority(): int
    {
        return 90;
    }

    /**
     * @param string $itemName
     * @return array|string[]
     */
    protected function getAdditionalAttributes(string $itemName): array
    {
        return [
            'data-callback-module' => '@mbhsoft/treehide/ContextMenuActions',
            'data-mode' => $itemName === 'hidePagesRecursive' ? 1 : 0,
        ];
    }

    /**
     * This method is called for each item this provider adds and checks if given item can be added
     *
     * @param string $itemName
     * @param string $type
     * @return bool
     */
    protected function canRender(string $itemName, string $type): bool
    {
        // checking if item is disabled through TSConfig
        if (in_array($itemName, $this->disabledItems, true)) {
            return false;
        }
        return $this->backendUser->isAdmin();
    }
}
